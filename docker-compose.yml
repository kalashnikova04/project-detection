services:
  django:
    build: ./web
    container_name: django
    restart: always
    command: gunicorn lp_detection.wsgi:application --bind 0.0.0.0:8098
    env_file:
      - .env
    volumes:
      - share_data:/lp_detection/media/
      - static_data:/lp_detection/static/
    depends_on:
      pgdb:
        condition: service_healthy
      rmq:
        condition: service_healthy

  pgdb:
    image: postgres
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${PGUSER}'"]
      interval: 10s
      timeout: 5s
      retries: 5
    container_name: pgdb
  
  model_deployed:
    build: ./mmdet
    container_name: mmdeploy-mmdet
    restart: always
    volumes: 
      - share_data:/mmdetection/share_web/
      - models:/mmdetection/mmdeploy_models/mmdet/onnx/
    tty: true
    entrypoint: python3 -u back_model_dino4_inference.py
    env_file:
      - .env
    depends_on:
      - rmq
      - django
  
  rmq:
    image: rabbitmq:3.8.14-management-alpine
    hostname: ${RMQ_HOST}
    ports:
      - 15672:15672
      - 5672:5672
    environment:
      - RABBITMQ_DEFAULT_USER=${RMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RMQ_PASS}
      - RABBITMQ_DEFAULT_VHOST=${RMQ_VHOST}
    container_name: rmq
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 30s
      timeout: 30s
      retries: 10
  
  nginx:
    build: ./nginx
    restart: always
    ports:
      - 8099:80
    container_name: nginx
    volumes:
      - static_data:/usr/share/nginx/static/
      - share_data:/usr/share/nginx/media/
    depends_on:
      - django


volumes:
  postgres_data:
  share_data:
  static_data:
  models:
